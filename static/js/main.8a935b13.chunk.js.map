{"version":3,"sources":["logo.svg","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","cripto","SimpleCrypto","App","state","items","index","edit","mode","hash","window","location","decryptObject","slice","err","console","error","add","bind","renderItens","handleKeyPress","remove","select","updateState","newState","this","setState","encryptObject","item","newItems","value","owner","selected","Object","keys","forEach","i","map","id","className","key","onChange","e","checked","icon","onClick","event","charCode","preventDefault","stopPropagation","src","logo","alt","target","onKeyPress","label","href","title","Component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.8a935b13.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.e39b585b.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport SimpleCrypto from \"simple-crypto-js\"\n\nimport {InputText} from 'primereact/inputtext';\nimport {Button} from 'primereact/button';\nimport {Checkbox} from 'primereact/checkbox';\n\nimport 'primereact/resources/themes/nova-light/theme.css';\nimport 'primereact/resources/primereact.min.css';\nimport 'primeicons/primeicons.css';\n\nconst cripto = new SimpleCrypto('segredinho');\n\nconst INSERT = 'insert';\nconst SELECT = 'select';\n\nclass App extends Component {\n    \n  constructor() {\n      super();\n      let state = {\n        items:{},\n        index:0,\n        edit:'',\n        mode:INSERT\n      };\n      try{\n        const { hash } = window.location;\n        if(hash){\n          state = cripto.decryptObject(hash.slice(1));\n        }\n      }catch(err){\n        console.error(err);\n      }\n      this.state = state;\n      this.add = this.add.bind(this);\n      this.renderItens = this.renderItens.bind(this);\n      this.handleKeyPress = this.handleKeyPress.bind(this);\n      this.remove = this.remove.bind(this);\n      this.edit = this.edit.bind(this);\n      this.select = this.select.bind(this);\n      this.updateState = this.updateState.bind(this);\n  }\n\n  updateState(newState){\n    this.setState(newState);\n    window.location.hash = cripto.encryptObject(newState);\n  }\n  \n  add() {\n    if(this.state.mode === INSERT){\n      let index = this.state.index;\n      let item = this.state.edit;\n      if(item){\n        const newItems = {...this.state.items};\n        newItems[index] = {\n          value: item,\n          owner: '',\n          selected: false,\n        };\n        index++;\n        const newState = {items: newItems, edit:'', index};\n        this.updateState(newState);\n      }\n    } else if(this.state.mode === SELECT){\n      let owner = this.state.edit;\n      if(owner){\n        const newItems = {...this.state.items};\n        Object.keys(newItems).forEach( i => {\n          if(newItems[i].selected){\n            delete newItems[i].selected;\n            newItems[i].owner =owner;\n          }\n        });\n        const newState = {items: newItems, edit:'', mode: INSERT};\n        this.updateState(newState);\n      }\n    }\n  }\n\n  select(index: number){\n    const newItems = {...this.state.items};    \n    const newState = {items: newItems, mode: SELECT};\n    newItems[index].selected = true;\n    this.updateState(newState);\n  }\n\n  remove(index: number){\n    const newItems = {...this.state.items};\n    delete newItems[index];\n    const newState = {items: newItems};\n    this.updateState(newState);\n  }\n\n  edit(index: number){\n    const newItems = {...this.state.items};    \n    const newState = {items: newItems, edit: newItems[index].value};\n    delete newItems[index];\n    this.updateState(newState);\n  }\n\n  renderItens(){\n    const itens = Object.keys(this.state.items).map(i => {\n      return {id: i, item: this.state.items[i]};\n    });\n    return itens.map(({id , item}) => \n        <div className=\"p-grid\" key={id}>\n            <div className=\"p-col-1\">\n              <Checkbox onChange={e => this.select(id)} checked={item.selected} />\n                &nbsp;{item.value} &nbsp; ~<b>{item.owner}</b>\n              <Button className=\"item p-button-danger p-button-rounded\" icon=\"pi pi-times\" onClick={() => this.remove(id)} />\n              <Button className=\"item p-button-warning p-button-rounded\" icon=\"pi pi-pencil\" onClick={() => this.edit(id)} />\n            </div>\n        </div>);\n  }\n\n  handleKeyPress(event){\n    if (event.charCode === 13) {\n      event.preventDefault();\n      event.stopPropagation();\n      this.add();\n    }\n  }\n  \n  render() {\n      return (\n        <div className=\"App\">\n          <div className=\"App-header\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            <h2>Shared List</h2>\n          </div>\n          <div className=\"App-intro\">\n            <InputText value={this.state.edit} onChange={(e) => this.setState({edit: e.target.value})} onKeyPress={this.handleKeyPress} />\n            <Button label={this.state.mode === INSERT ? \"Adicionar\" : \"ResponsÃ¡vel\"} icon=\"pi pi-plus\" onClick={this.add} />\n              {this.renderItens()}\n          </div>\n          <div className=\"App-footer\">\n          Icons made by <a href=\"https://www.flaticon.com/authors/prosymbols\" title=\"Prosymbols\">Prosymbols</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\"> www.flaticon.com</a>\n          </div>\n        </div>\n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}